{% comment %}
  Authentication Forms - Sign In / Sign Up
  Handles user login, registration, social auth, and factory account access
  Integrates with Shopify Customer Accounts
{% endcomment %}

<div class="auth-container" id="auth-container">
  <style>
    .auth-container {
      max-width: 500px;
      margin: 0 auto;
      padding: 2rem;
    }
    
    .auth-tabs {
      display: flex;
      border-radius: 1rem;
      background: #f1f5f9;
      padding: 0.5rem;
      margin-bottom: 3rem;
    }
    
    .auth-tab {
      flex: 1;
      padding: 1rem;
      border: none;
      background: transparent;
      border-radius: 0.5rem;
      cursor: pointer;
      font-weight: 600;
      transition: all 0.3s ease;
    }
    
    .auth-tab.active {
      background: white;
      color: #8B5CF6;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }
    
    .auth-form {
      display: none;
      background: white;
      padding: 3rem;
      border-radius: 1.5rem;
      box-shadow: 0 8px 40px rgba(0, 0, 0, 0.12);
    }
    
    .auth-form.active {
      display: block;
    }
    
    .form-group {
      margin-bottom: 2rem;
    }
    
    .form-label {
      display: block;
      font-weight: 600;
      margin-bottom: 0.5rem;
      color: #1e293b;
    }
    
    .form-input {
      width: 100%;
      padding: 1.2rem;
      border: 2px solid #e2e8f0;
      border-radius: 0.8rem;
      font-size: 1.6rem;
      transition: all 0.3s ease;
      box-sizing: border-box;
    }
    
    .form-input:focus {
      outline: none;
      border-color: #8B5CF6;
      box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
    }
    
    .form-button {
      width: 100%;
      padding: 1.5rem;
      background: linear-gradient(135deg, #8B5CF6, #A855F7);
      color: white;
      border: none;
      border-radius: 0.8rem;
      font-size: 1.6rem;
      font-weight: 700;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    
    .form-button:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(139, 92, 246, 0.3);
    }
    
    .form-button:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }
    
    .auth-divider {
      display: flex;
      align-items: center;
      margin: 2rem 0;
      color: #64748b;
    }
    
    .auth-divider::before,
    .auth-divider::after {
      content: '';
      flex: 1;
      height: 1px;
      background: #e2e8f0;
    }
    
    .auth-divider span {
      padding: 0 1rem;
    }
    
    
    .shopify-auth-info {
      margin: 2rem 0;
      text-align: center;
    }
    
    .shopify-auth-info p {
      color: #64748b;
      font-size: 1.4rem;
      margin: 0;
    }
    
    .error-message {
      background: #fef2f2;
      color: #dc2626;
      padding: 1rem;
      border-radius: 0.5rem;
      margin-bottom: 1rem;
      display: none;
    }
    
    .success-message {
      background: #f0fdf4;
      color: #16a34a;
      padding: 1rem;
      border-radius: 0.5rem;
      margin-bottom: 1rem;
      display: none;
    }
    
    .forgot-password {
      text-align: center;
      margin-top: 1rem;
    }
    
    .forgot-password a {
      color: #8B5CF6;
      text-decoration: none;
    }
    
         .forgot-password a:hover {
       text-decoration: underline;
     }
     
     .google-signin-container {
       margin: 1.5rem 0;
     }
     
     .google-signin-button {
       display: flex;
       align-items: center;
       justify-content: center;
       gap: 1rem;
       width: 100%;
       padding: 1.2rem;
       background: white;
       border: 2px solid #e2e8f0;
       border-radius: 0.8rem;
       color: #374151;
       text-decoration: none;
       font-weight: 600;
       font-size: 1.6rem;
       transition: all 0.3s ease;
       box-sizing: border-box;
     }
     
     .google-signin-button:hover {
       border-color: #d1d5db;
       background: #f9fafb;
       transform: translateY(-1px);
       box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
     }
     
     .google-signin-button svg {
       flex-shrink: 0;
     }
     
     @media (max-width: 768px) {
       .auth-container {
         padding: 1rem;
       }
       
       .auth-form {
         padding: 2rem;
       }
     }
  </style>

  <!-- Auth Tabs -->
  <div class="auth-tabs">
    <button class="auth-tab active" onclick="switchTab('signin')">Sign In</button>
    <button class="auth-tab" onclick="switchTab('signup')">Sign Up</button>
  </div>

    <!-- Sign In Form -->
  <div class="auth-form active" id="signin-form">
    <div class="error-message" id="signin-error"></div>
    <div class="success-message" id="signin-success"></div>
    
    <!-- Shopify Native Customer Account Sign In -->
    <div class="shopify-auth-info">
      <p style="text-align: center; color: #64748b; margin-bottom: 1rem;">
        Sign in with your Shopify customer account
      </p>
    </div>
    
    <!-- Use Shopify's native customer login form -->
    {% form 'customer_login' %}
      <div class="form-group">
        <label class="form-label" for="CustomerEmail">Email Address</label>
        <input type="email" name="customer[email]" id="CustomerEmail" class="form-input" placeholder="your@email.com" required>
      </div>
      
      <div class="form-group">
        <label class="form-label" for="CustomerPassword">Password</label>
        <input type="password" name="customer[password]" id="CustomerPassword" class="form-input" placeholder="Enter your password" required>
      </div>
      
      <button type="submit" class="form-button">Sign In</button>
    {% endform %}
    
    <!-- Google Sign-In Button -->
    <div class="auth-divider">
      <span>or</span>
    </div>
    
    <div class="google-signin-container">
      <a href="/account/login/google" class="google-signin-button">
        <svg width="20" height="20" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
          <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
          <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
          <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
        </svg>
        Continue with Google
      </a>
    </div>
    
    <div class="forgot-password">
      <a href="/account/recover">Forgot your password?</a>
    </div>
  </div>

  <!-- Sign Up Form -->
  <div class="auth-form" id="signup-form">
    <div class="error-message" id="signup-error"></div>
    <div class="success-message" id="signup-success"></div>
    
    <!-- Shopify Native Customer Account Sign Up -->
    <div class="shopify-auth-info">
      <p style="text-align: center; color: #64748b; margin-bottom: 1rem;">
        Create a new Shopify customer account
      </p>
    </div>
    
    <!-- Use Shopify's native customer registration form -->
    {% form 'create_customer' %}
      <div class="form-group">
        <label class="form-label" for="FirstName">First Name</label>
        <input type="text" name="customer[first_name]" id="FirstName" class="form-input" placeholder="John" required>
      </div>
      
      <div class="form-group">
        <label class="form-label" for="LastName">Last Name</label>
        <input type="text" name="customer[last_name]" id="LastName" class="form-input" placeholder="Doe" required>
      </div>
      
      <div class="form-group">
        <label class="form-label" for="Email">Email Address</label>
        <input type="email" name="customer[email]" id="Email" class="form-input" placeholder="your@email.com" required>
      </div>
      
      <div class="form-group">
        <label class="form-label" for="CreatePassword">Password</label>
        <input type="password" name="customer[password]" id="CreatePassword" class="form-input" placeholder="Create a strong password" required minlength="8">
      </div>
      
      <button type="submit" class="form-button">Create Account</button>
    {% endform %}
    
    <!-- Google Sign-In Button -->
    <div class="auth-divider">
      <span>or</span>
    </div>
    
    <div class="google-signin-container">
      <a href="/account/login/google" class="google-signin-button">
        <svg width="20" height="20" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
          <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
          <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
          <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
        </svg>
        Continue with Google
      </a>
    </div>
  </div>

  <!-- Logout Option (if logged in) -->
  <div id="logout-section" style="display: none; background: #fef2f2; color: #dc2626; padding: 2rem; border-radius: 1rem; margin-top: 2rem; text-align: center;">
    <h3>🚪 Already Signed In?</h3>
    <p>You are currently logged in. Click below to sign out and access the sign-in form.</p>
    <div style="display: flex; gap: 1rem; justify-content: center; margin-top: 1rem;">
      <button class="factory-button" style="background: #dc2626; border-color: #dc2626;" onclick="forceLogout()">Sign Out</button>
      <a href="/account" class="factory-button" style="background: #8B5CF6; border-color: #8B5CF6; text-decoration: none;">Manage Account</a>
    </div>
  </div>

</div>

<script>
console.log('🎯 Auth forms script loaded!');
let currentTab = 'signin';

function switchTab(tab) {
  currentTab = tab;
  
  // Update tab buttons
  document.querySelectorAll('.auth-tab').forEach(btn => {
    btn.classList.remove('active');
  });
  event.target.classList.add('active');
  
  // Update forms
  document.querySelectorAll('.auth-form').forEach(form => {
    form.classList.remove('active');
  });
  document.getElementById(tab + '-form').classList.add('active');
  
  // Clear messages
  clearMessages();
}

function clearMessages() {
  document.querySelectorAll('.error-message, .success-message').forEach(msg => {
    msg.style.display = 'none';
    msg.textContent = '';
  });
}

function showError(formType, message) {
  const errorEl = document.getElementById(formType + '-error');
  errorEl.textContent = message;
  errorEl.style.display = 'block';
}

function showSuccess(formType, message) {
  const successEl = document.getElementById(formType + '-success');
  successEl.textContent = message;
  successEl.style.display = 'block';
}

// This function is no longer needed since we're using Shopify's native forms
// Shopify handles all authentication, CAPTCHA, and validation automatically

// This function is no longer needed since we're using Shopify's native forms
// Shopify handles all authentication, CAPTCHA, and validation automatically

// Shopify Native Customer Account Functions
// These functions integrate with Shopify's built-in customer account system


// Password reset is now handled by Shopify's native system at /account/recover

function forceLogout() {
  // Clear all data immediately
  localStorage.clear();
  sessionStorage.clear();
  
  // Remove Factory banner if present
  const banner = document.getElementById('factory-mode-banner');
  if (banner) {
    banner.remove();
    document.body.style.paddingTop = '';
  }
  
  // Update header
  window.dispatchEvent(new Event('piccatso-auth-change'));
  if (window.refreshAuthButton) {
    window.refreshAuthButton();
  }
  
  // Hide logout section and show success
  document.getElementById('logout-section').style.display = 'none';
  showSuccess('signin', 'You have been logged out successfully. You can now sign in with a different account.');
  
  // If user was logged into Shopify, redirect to Shopify logout
  const user = JSON.parse(localStorage.getItem('piccatso_user') || '{}');
  if (user.loginMethod === 'shopify') {
    // Redirect to Shopify's logout page
    setTimeout(() => {
      window.location.href = '/account/logout';
    }, 1500);
  }
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
  try {
    console.log('🚀 Page loaded, current URL:', window.location.href);
    console.log('📄 Current page path:', window.location.pathname);
    
    // Check URL for logout parameter
    const urlParams = new URLSearchParams(window.location.search);
    const isLogout = urlParams.get('logout') === 'true';
    
    if (isLogout) {
      console.log('🚪 Logout parameter detected');
      // User wants to log out - clear data and show logout message
      localStorage.removeItem('piccatso_user');
      localStorage.removeItem('piccatso_user_data');
      sessionStorage.clear();
      
      // Remove Factory banner if present
      const banner = document.getElementById('factory-mode-banner');
      if (banner) {
        banner.remove();
        document.body.style.paddingTop = '';
      }
      
      // Update header
      window.dispatchEvent(new Event('piccatso-auth-change'));
      if (window.refreshAuthButton) {
        window.refreshAuthButton();
      }
      
      showSuccess('signin', 'You have been logged out successfully.');
      
      // Clean URL
      window.history.replaceState({}, document.title, window.location.pathname);
      return;
    }
    
    // Check for Shopify customer account success (if redirected from account creation)
    const shopifySuccess = urlParams.get('shopify_success') === 'true';
    if (shopifySuccess) {
      console.log('✅ Shopify success parameter detected');
      showSuccess('signin', 'Account created successfully! You can now sign in with your email and password.');
      // Clean URL
      window.history.replaceState({}, document.title, window.location.pathname);
    }
    
    // Clear any stale authentication data first
    clearStaleAuthData();
    
    // Check if user is already logged in via Shopify or local storage
    checkShopifyCustomerStatus();
    
  } catch (error) {
    console.error('❌ Error in DOMContentLoaded:', error);
  }
});

// Function to clear stale authentication data
function clearStaleAuthData() {
  try {
    console.log('🧹 Clearing stale authentication data...');
    
    // Check if we're on auth pages - clear localStorage to prevent cross-user contamination
    const currentPath = window.location.pathname;
    if (currentPath.includes('/auth') || currentPath.includes('/login') || currentPath.includes('/register')) {
      console.log('🧹 On auth page - clearing localStorage to prevent cross-user contamination');
      localStorage.removeItem('piccatso_user');
      localStorage.removeItem('piccatso_user_data');
    }
    
    // Check if localStorage has old data that doesn't match current customer
    const storedUser = localStorage.getItem('piccatso_user');
    if (storedUser) {
      try {
        const userData = JSON.parse(storedUser);
        console.log('📦 Found stored user data:', userData);
        
        // If we have window.customer but it doesn't match stored data, clear it
        if (window.customer && window.customer.id && userData.id !== window.customer.id) {
          console.log('⚠️ Customer ID mismatch - clearing stored data');
          console.log('Stored ID:', userData.id, 'Current customer ID:', window.customer.id);
          localStorage.removeItem('piccatso_user');
          localStorage.removeItem('piccatso_user_data');
        }
      } catch (e) {
        console.log('⚠️ Invalid stored user data - clearing');
        localStorage.removeItem('piccatso_user');
        localStorage.removeItem('piccatso_user_data');
      }
    }
  } catch (error) {
    console.error('❌ Error clearing stale auth data:', error);
  }
}

// Function to check if user is logged into Shopify
async function checkShopifyCustomerStatus() {
  try {
    console.log('🔍 Checking Shopify customer status...');
    
    // First, clear any old localStorage data to prevent cross-user contamination
    const currentUrl = window.location.href;
    if (currentUrl.includes('logout=true') || currentUrl.includes('login') || currentUrl.includes('register')) {
      console.log('🧹 Clearing old authentication data...');
      localStorage.removeItem('piccatso_user');
      localStorage.removeItem('piccatso_user_data');
    }
    
    // Check if we have a Shopify customer object (this means user is logged in)
    // But prioritize window.customer over window.Shopify.customer for accuracy
    let customer = null;
    if (window.customer && window.customer.id) {
      customer = window.customer;
      console.log('📱 Using window.customer (most current):', customer);
    } else if (typeof window.Shopify !== 'undefined' && window.Shopify.customer) {
      customer = window.Shopify.customer;
      console.log('📱 Using window.Shopify.customer (fallback):', customer);
    }
      
      if (customer.id) {
        console.log('✅ Valid Shopify customer ID:', customer.id);
        
        // User is logged into Shopify - sync with local system
        const userData = {
          id: customer.id,
          email: customer.email,
          name: (customer.first_name + ' ' + customer.last_name).trim(),
          tier: 'free', // Default tier for all new accounts
          isLoggedIn: true,
          provider: 'shopify',
          generationsUsed: 0,
          generationsLimit: 10,
          artworks: [],
          cartItems: [],
          orders: []
        };
        
        console.log('💾 Storing user data:', userData);
        
        // Store in localStorage
        localStorage.setItem('piccatso_user', JSON.stringify(userData));
        
        // Initialize subscription manager
        if (window.PiccatsoSubscription) {
          window.PiccatsoSubscription.initializeUser(customer.email, 'free');
        }
        
        // Update header navigation
        window.dispatchEvent(new Event('piccatso-auth-change'));
        if (window.refreshAuthButton) {
          window.refreshAuthButton();
        }
        
        // Show logout section
        document.getElementById('logout-section').style.display = 'block';
        const logoutSection = document.getElementById('logout-section');
        logoutSection.querySelector('p').textContent = `You are logged in as ${userData.name} (${userData.tier} tier). Click below to sign out.`;
        
        return;
      } else {
        console.log('❌ No valid customer ID found');
      }
    } else {
      console.log('❌ No Shopify customer object found');
      console.log('🔍 window.Shopify:', window.Shopify);
    }
    
    // Check local storage for existing user
    const user = JSON.parse(localStorage.getItem('piccatso_user') || '{}');
    console.log('💾 Local storage user data:', user);
    
    if (user.email && user.isLoggedIn) {
      console.log('✅ Local user found:', user.email);
      
      // Show logout section
      document.getElementById('logout-section').style.display = 'block';
      
      // Update the logout section with user info
      const logoutSection = document.getElementById('logout-section');
      const userName = user.name || 'User';
      const tierName = user.tier ? user.tier.charAt(0).toUpperCase() + user.tier.slice(1) : 'Free';
      
      logoutSection.querySelector('p').textContent = `You are logged in as ${userName} (${tierName} tier). Click below to sign out.`;
    } else {
      console.log('❌ No local user found');
    }
    
  } catch (error) {
    console.error('❌ Error checking Shopify customer status:', error);
  }
}
</script>
