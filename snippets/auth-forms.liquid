{% comment %}
  Authentication Forms - Sign In / Sign Up
  Handles user login, registration, social auth, and factory account access
  Integrates with Shopify Customer Accounts
{% endcomment %}

<div class="auth-container" id="auth-container">
  <style>
    .auth-container {
      max-width: 500px;
      margin: 0 auto;
      padding: 2rem;
    }
    
    .auth-tabs {
      display: flex;
      border-radius: 1rem;
      background: #f1f5f9;
      padding: 0.5rem;
      margin-bottom: 3rem;
    }
    
    .auth-tab {
      flex: 1;
      padding: 1rem;
      border: none;
      background: transparent;
      border-radius: 0.5rem;
      cursor: pointer;
      font-weight: 600;
      transition: all 0.3s ease;
    }
    
    .auth-tab.active {
      background: white;
      color: #8B5CF6;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }
    
    .auth-form {
      display: none;
      background: white;
      padding: 3rem;
      border-radius: 1.5rem;
      box-shadow: 0 8px 40px rgba(0, 0, 0, 0.12);
    }
    
    .auth-form.active {
      display: block;
    }
    
    .form-group {
      margin-bottom: 2rem;
    }
    
    .form-label {
      display: block;
      font-weight: 600;
      margin-bottom: 0.5rem;
      color: #1e293b;
    }
    
    .form-input {
      width: 100%;
      padding: 1.2rem;
      border: 2px solid #e2e8f0;
      border-radius: 0.8rem;
      font-size: 1.6rem;
      transition: all 0.3s ease;
      box-sizing: border-box;
    }
    
    .form-input:focus {
      outline: none;
      border-color: #8B5CF6;
      box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
    }
    
    .form-button {
      width: 100%;
      padding: 1.5rem;
      background: linear-gradient(135deg, #8B5CF6, #A855F7);
      color: white;
      border: none;
      border-radius: 0.8rem;
      font-size: 1.6rem;
      font-weight: 700;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    
    .form-button:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(139, 92, 246, 0.3);
    }
    
    .form-button:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }
    
    .auth-divider {
      display: flex;
      align-items: center;
      margin: 2rem 0;
      color: #64748b;
    }
    
    .auth-divider::before,
    .auth-divider::after {
      content: '';
      flex: 1;
      height: 1px;
      background: #e2e8f0;
    }
    
    .auth-divider span {
      padding: 0 1rem;
    }
    
    .factory-access {
      background: linear-gradient(135deg, #ef4444, #dc2626);
      color: white;
      padding: 2rem;
      border-radius: 1rem;
      margin-top: 2rem;
      text-align: center;
    }
    
    .factory-access h3 {
      margin-bottom: 1rem;
      font-size: 1.8rem;
    }
    
    .factory-button {
      background: rgba(255, 255, 255, 0.2);
      border: 2px solid rgba(255, 255, 255, 0.3);
      color: white;
      padding: 1rem 2rem;
      border-radius: 0.5rem;
      cursor: pointer;
      font-weight: 600;
      transition: all 0.3s ease;
    }
    
    .factory-button:hover {
      background: rgba(255, 255, 255, 0.3);
      border-color: rgba(255, 255, 255, 0.5);
    }
    
    .social-auth {
      margin: 2rem 0;
    }
    
    .social-buttons {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }
    
    .social-button {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 1rem;
      padding: 1.2rem;
      border: 2px solid #e2e8f0;
      border-radius: 0.8rem;
      background: white;
      color: #1e293b;
      text-decoration: none;
      font-weight: 600;
      font-size: 1.4rem;
      transition: all 0.3s ease;
      cursor: pointer;
    }
    
    .social-button:hover {
      border-color: #cbd5e1;
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }
    
    .social-button.google {
      border-color: #ea4335;
    }
    
    .social-button.google:hover {
      background: #ea4335;
      color: white;
    }
    
    .social-button.apple {
      border-color: #000;
    }
    
    .social-button.apple:hover {
      background: #000;
      color: white;
    }
    
    .social-button.microsoft {
      border-color: #0078d4;
    }
    
    .social-button.microsoft:hover {
      background: #0078d4;
      color: white;
    }
    
    .social-icon {
      width: 20px;
      height: 20px;
    }
    
    .error-message {
      background: #fef2f2;
      color: #dc2626;
      padding: 1rem;
      border-radius: 0.5rem;
      margin-bottom: 1rem;
      display: none;
    }
    
    .success-message {
      background: #f0fdf4;
      color: #16a34a;
      padding: 1rem;
      border-radius: 0.5rem;
      margin-bottom: 1rem;
      display: none;
    }
    
    .forgot-password {
      text-align: center;
      margin-top: 1rem;
    }
    
    .forgot-password a {
      color: #8B5CF6;
      text-decoration: none;
    }
    
    .forgot-password a:hover {
      text-decoration: underline;
    }
    
    @media (max-width: 768px) {
      .auth-container {
        padding: 1rem;
      }
      
      .auth-form {
        padding: 2rem;
      }
    }
  </style>

  <!-- Auth Tabs -->
  <div class="auth-tabs">
    <button class="auth-tab active" onclick="switchTab('signin')">Sign In</button>
    <button class="auth-tab" onclick="switchTab('signup')">Sign Up</button>
  </div>

  <!-- Sign In Form -->
  <div class="auth-form active" id="signin-form">
    <div class="error-message" id="signin-error"></div>
    <div class="success-message" id="signin-success"></div>
    
    <!-- Social Authentication -->
    <div class="social-auth">
      <div class="social-buttons">
        <button type="button" class="social-button google" data-social-button="google" onclick="RealSocialAuth.loginWithGoogle()">
          <svg class="social-icon" viewBox="0 0 24 24">
            <path fill="currentColor" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
            <path fill="currentColor" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
            <path fill="currentColor" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
            <path fill="currentColor" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
          </svg>
          Continue with Google
        </button>
        
        <button type="button" class="social-button apple" data-social-button="apple" onclick="RealSocialAuth.loginWithApple()">
          <svg class="social-icon" viewBox="0 0 24 24">
            <path fill="currentColor" d="M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z"/>
          </svg>
          Continue with Apple
        </button>
        
        <button type="button" class="social-button microsoft" data-social-button="microsoft" onclick="RealSocialAuth.loginWithMicrosoft()">
          <svg class="social-icon" viewBox="0 0 24 24">
            <path fill="currentColor" d="M11.4 24H0V12.6h11.4V24zM24 24H12.6V12.6H24V24zM11.4 11.4H0V0h11.4v11.4zM24 11.4H12.6V0H24v11.4z"/>
          </svg>
          Continue with Microsoft
        </button>
      </div>
    </div>
    
    <div class="auth-divider">
      <span>or sign in with email</span>
    </div>
    
    <form onsubmit="handleSignIn(event)">
      <div class="form-group">
        <label class="form-label" for="signin-email">Email Address</label>
        <input type="email" id="signin-email" class="form-input" placeholder="your@email.com" required>
      </div>
      
      <div class="form-group">
        <label class="form-label" for="signin-password">Password</label>
        <input type="password" id="signin-password" class="form-input" placeholder="Enter your password" required>
      </div>
      
      <button type="submit" class="form-button">Sign In</button>
    </form>
    
    <div class="forgot-password">
      <a href="#" onclick="showForgotPassword()">Forgot your password?</a>
    </div>
  </div>

  <!-- Sign Up Form -->
  <div class="auth-form" id="signup-form">
    <div class="error-message" id="signup-error"></div>
    <div class="success-message" id="signup-success"></div>
    
    <!-- Social Authentication -->
    <div class="social-auth">
      <div class="social-buttons">
        <button type="button" class="social-button google" onclick="signUpWithGoogle()">
          <svg class="social-icon" viewBox="0 0 24 24">
            <path fill="currentColor" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
            <path fill="currentColor" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
            <path fill="currentColor" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
            <path fill="currentColor" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
          </svg>
          Sign up with Google
        </button>
        
        <button type="button" class="social-button apple" onclick="signUpWithApple()">
          <svg class="social-icon" viewBox="0 0 24 24">
            <path fill="currentColor" d="M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z"/>
          </svg>
          Sign up with Apple
        </button>
        
        <button type="button" class="social-button microsoft" onclick="signUpWithMicrosoft()">
          <svg class="social-icon" viewBox="0 0 24 24">
            <path fill="currentColor" d="M11.4 24H0V12.6h11.4V24zM24 24H12.6V12.6H24V24zM11.4 11.4H0V0h11.4v11.4zM24 11.4H12.6V0H24v11.4z"/>
          </svg>
          Sign up with Microsoft
        </button>
      </div>
    </div>
    
    <div class="auth-divider">
      <span>or sign up with email</span>
    </div>
    
    <form onsubmit="handleSignUp(event)">
      <div class="form-group">
        <label class="form-label" for="signup-name">Full Name</label>
        <input type="text" id="signup-name" class="form-input" placeholder="John Doe" required>
      </div>
      
      <div class="form-group">
        <label class="form-label" for="signup-email">Email Address</label>
        <input type="email" id="signup-email" class="form-input" placeholder="your@email.com" required>
      </div>
      
      <div class="form-group">
        <label class="form-label" for="signup-password">Password</label>
        <input type="password" id="signup-password" class="form-input" placeholder="Create a strong password" required minlength="8">
      </div>
      
      <div class="form-group">
        <label class="form-label" for="signup-confirm">Confirm Password</label>
        <input type="password" id="signup-confirm" class="form-input" placeholder="Confirm your password" required minlength="8">
      </div>
      
      <button type="submit" class="form-button">Create Account</button>
    </form>
  </div>

  <!-- Logout Option (if logged in) -->
  <div id="logout-section" style="display: none; background: #fef2f2; color: #dc2626; padding: 2rem; border-radius: 1rem; margin-top: 2rem; text-align: center;">
    <h3>🚪 Already Signed In?</h3>
    <p>You are currently logged in. Click below to sign out and access the sign-in form.</p>
    <button class="factory-button" style="background: #dc2626; border-color: #dc2626;" onclick="forceLogout()">Sign Out</button>
  </div>

  <!-- Factory Access (Admin Testing) -->
  <div class="factory-access">
    <h3>🏭 Factory Access</h3>
    <p>Secure testing environment with full system access</p>
    <button class="factory-button" onclick="factoryLogin()">Access Factory Account</button>
  </div>
</div>

<script>
let currentTab = 'signin';

function switchTab(tab) {
  currentTab = tab;
  
  // Update tab buttons
  document.querySelectorAll('.auth-tab').forEach(btn => {
    btn.classList.remove('active');
  });
  event.target.classList.add('active');
  
  // Update forms
  document.querySelectorAll('.auth-form').forEach(form => {
    form.classList.remove('active');
  });
  document.getElementById(tab + '-form').classList.add('active');
  
  // Clear messages
  clearMessages();
}

function clearMessages() {
  document.querySelectorAll('.error-message, .success-message').forEach(msg => {
    msg.style.display = 'none';
    msg.textContent = '';
  });
}

function showError(formType, message) {
  const errorEl = document.getElementById(formType + '-error');
  errorEl.textContent = message;
  errorEl.style.display = 'block';
}

function showSuccess(formType, message) {
  const successEl = document.getElementById(formType + '-success');
  successEl.textContent = message;
  successEl.style.display = 'block';
}

async function handleSignIn(event) {
  event.preventDefault();
  clearMessages();
  
  const email = document.getElementById('signin-email').value;
  const password = document.getElementById('signin-password').value;
  
  try {
    // Create a form and submit it to Shopify's login endpoint
    const form = document.createElement('form');
    form.method = 'POST';
    form.action = '/account/login';
    form.style.display = 'none';
    
    // Add form fields
    const formFields = {
      'form_type': 'customer_login',
      'utf8': '✓',
      'customer[email]': email,
      'customer[password]': password,
      'return_to': '/pages/account'
    };
    
    Object.keys(formFields).forEach(key => {
      const input = document.createElement('input');
      input.type = 'hidden';
      input.name = key;
      input.value = formFields[key];
      form.appendChild(input);
    });
    
    document.body.appendChild(form);
    
    showSuccess('signin', 'Signing in...');
    
    // Submit the form
    form.submit();
    
  } catch (error) {
    console.error('Sign in error:', error);
    showError('signin', 'Network error. Please try again.');
  }
}

async function handleSignUp(event) {
  event.preventDefault();
  clearMessages();
  
  const name = document.getElementById('signup-name').value;
  const email = document.getElementById('signup-email').value;
  const password = document.getElementById('signup-password').value;
  const confirmPassword = document.getElementById('signup-confirm').value;
  
  // Validate passwords match
  if (password !== confirmPassword) {
    showError('signup', 'Passwords do not match.');
    return;
  }
  
  // Validate password strength
  if (password.length < 8) {
    showError('signup', 'Password must be at least 8 characters long.');
    return;
  }
  
  try {
    // Split name into first and last name
    const nameParts = name.trim().split(' ');
    const firstName = nameParts[0] || '';
    const lastName = nameParts.slice(1).join(' ') || '';
    
    // Create a form and submit it to Shopify's registration endpoint
    const form = document.createElement('form');
    form.method = 'POST';
    form.action = '/account';
    form.style.display = 'none';
    
    // Add form fields
    const formFields = {
      'form_type': 'create_customer',
      'utf8': '✓',
      'customer[first_name]': firstName,
      'customer[last_name]': lastName,
      'customer[email]': email,
      'customer[password]': password,
      'return_to': '/pages/auth?signup=success'
    };
    
    Object.keys(formFields).forEach(key => {
      const input = document.createElement('input');
      input.type = 'hidden';
      input.name = key;
      input.value = formFields[key];
      form.appendChild(input);
    });
    
    document.body.appendChild(form);
    
    showSuccess('signup', 'Creating account...');
    
    // Initialize user with Free tier
    if (window.PiccatsoSubscription) {
      window.PiccatsoSubscription.initializeUser(email, 'free');
    }
    
    // Submit the form
    form.submit();
    
  } catch (error) {
    console.error('Sign up error:', error);
    showError('signup', 'Network error. Please try again.');
  }
}

// Social Authentication Functions
async function signInWithGoogle() {
  try {
    showSuccess('signin', 'Redirecting to Google Sign In...');
    
    // In a real implementation, this would integrate with Google OAuth
    // For now, we'll simulate the process
    alert('Google Sign In would be integrated here. This requires setting up Google OAuth in your Shopify app settings.');
    
    // Simulate successful Google login for demo
    setTimeout(() => {
      const mockUser = {
        email: 'user@gmail.com',
        name: 'Google User',
        provider: 'google'
      };
      handleSocialLoginSuccess(mockUser);
    }, 1000);
    
  } catch (error) {
    showError('signin', 'Google Sign In failed. Please try again.');
  }
}

async function signInWithApple() {
  try {
    showSuccess('signin', 'Redirecting to Apple Sign In...');
    
    // In a real implementation, this would integrate with Apple Sign In
    alert('Apple Sign In would be integrated here. This requires setting up Apple Sign In in your Shopify app settings.');
    
    // Simulate successful Apple login for demo
    setTimeout(() => {
      const mockUser = {
        email: 'user@icloud.com',
        name: 'Apple User',
        provider: 'apple'
      };
      handleSocialLoginSuccess(mockUser);
    }, 1000);
    
  } catch (error) {
    showError('signin', 'Apple Sign In failed. Please try again.');
  }
}

async function signInWithMicrosoft() {
  try {
    showSuccess('signin', 'Redirecting to Microsoft Sign In...');
    
    // In a real implementation, this would integrate with Microsoft OAuth
    alert('Microsoft Sign In would be integrated here. This requires setting up Microsoft OAuth in your Shopify app settings.');
    
    // Simulate successful Microsoft login for demo
    setTimeout(() => {
      const mockUser = {
        email: 'user@outlook.com',
        name: 'Microsoft User',
        provider: 'microsoft'
      };
      handleSocialLoginSuccess(mockUser);
    }, 1000);
    
  } catch (error) {
    showError('signin', 'Microsoft Sign In failed. Please try again.');
  }
}

// Sign Up versions
async function signUpWithGoogle() {
  await signInWithGoogle(); // Same process for sign up
}

async function signUpWithApple() {
  await signInWithApple(); // Same process for sign up
}

async function signUpWithMicrosoft() {
  await signInWithMicrosoft(); // Same process for sign up
}

function handleSocialLoginSuccess(user) {
  // Store user data
  localStorage.setItem('piccatso_user', JSON.stringify({
    id: `${user.provider}_${Date.now()}`,
    email: user.email,
    name: user.name,
    tier: 'free',
    isLoggedIn: true,
    provider: user.provider,
    loginTime: new Date().toISOString()
  }));
  
  // Initialize subscription
  if (window.PiccatsoSubscription) {
    window.PiccatsoSubscription.initializeUser(user.email, 'free');
  }
  
  // Update header navigation
  window.dispatchEvent(new Event('piccatso-auth-change'));
  
  // Redirect to account page
  showSuccess('signin', `Welcome ${user.name}! Redirecting to your account...`);
  setTimeout(() => {
    window.location.href = '/pages/account';
  }, 1500);
}

function factoryLogin() {
  // Factory account login with predefined credentials
  const factoryCredentials = {
    username: 'Factory',
    password: 'Msi08536',
    email: 'factory@piccatso.internal'
  };
  
  // Set factory session
  localStorage.setItem('piccatso_user', JSON.stringify({
    id: 'factory_001',
    email: factoryCredentials.email,
    name: 'Factory Account',
    tier: 'factory',
    isFactory: true,
    isLoggedIn: true,
    loginTime: new Date().toISOString(),
    permissions: {
      fullAccess: true,
      adminPanel: true,
      testingMode: true,
      unlimitedGenerations: true,
      allFeatures: true
    }
  }));
  
  // Initialize Factory tier in subscription manager
  if (window.PiccatsoSubscription) {
    window.PiccatsoSubscription.initializeUser(factoryCredentials.email, 'factory');
    window.PiccatsoSubscription.setFactoryMode(true);
  }
  
  // Update header navigation
  window.dispatchEvent(new Event('piccatso-auth-change'));
  
  // Force immediate header refresh
  if (window.refreshAuthButton) {
    window.refreshAuthButton();
  }
  
  // Show success and redirect
  showSuccess('signin', 'Factory access granted! Redirecting to account...');
  
  setTimeout(() => {
    window.location.href = '/pages/account?factory=true';
  }, 1500);
}

function showForgotPassword() {
  alert('Password reset functionality would integrate with Shopify customer accounts. For now, contact support or use the Factory account for testing.');
}

function forceLogout() {
  // Clear all data immediately
  localStorage.clear();
  sessionStorage.clear();
  
  // Remove Factory banner if present
  const banner = document.getElementById('factory-mode-banner');
  if (banner) {
    banner.remove();
    document.body.style.paddingTop = '';
  }
  
  // Update header
  window.dispatchEvent(new Event('piccatso-auth-change'));
  if (window.refreshAuthButton) {
    window.refreshAuthButton();
  }
  
  // Hide logout section and show success
  document.getElementById('logout-section').style.display = 'none';
  showSuccess('signin', 'You have been logged out successfully. You can now sign in with a different account.');
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
  // Check URL for logout parameter
  const urlParams = new URLSearchParams(window.location.search);
  const isLogout = urlParams.get('logout') === 'true';
  
  if (isLogout) {
    // User wants to log out - clear data and show logout message
    localStorage.removeItem('piccatso_user');
    localStorage.removeItem('piccatso_user_data');
    sessionStorage.clear();
    
    // Remove Factory banner if present
    const banner = document.getElementById('factory-mode-banner');
    if (banner) {
      banner.remove();
      document.body.style.paddingTop = '';
    }
    
    // Update header
    window.dispatchEvent(new Event('piccatso-auth-change'));
    if (window.refreshAuthButton) {
      window.refreshAuthButton();
    }
    
    showSuccess('signin', 'You have been logged out successfully.');
    
    // Clean URL
    window.history.replaceState({}, document.title, window.location.pathname);
    return;
  }
  
  // Check for Google OAuth success
  const googleSuccess = urlParams.get('google_success') === 'true';
  if (googleSuccess) {
    const session = urlParams.get('session');
    const email = urlParams.get('email');
    const name = urlParams.get('name');
    
    if (session && email) {
      try {
        // Parse session data
        const sessionData = JSON.parse(atob(session));
        
        // Store user data
        localStorage.setItem('piccatso_user', JSON.stringify({
          id: sessionData.googleId || 'google_' + Date.now(),
          email: email,
          name: name || sessionData.name || 'Google User',
          tier: sessionData.tier || 'free',
          isLoggedIn: true,
          loginTime: sessionData.loginTime || new Date().toISOString(),
          picture: sessionData.picture || '',
          loginMethod: 'google'
        }));
        
        // Initialize user in subscription manager
        if (window.PiccatsoSubscription) {
          window.PiccatsoSubscription.initializeUser(email, sessionData.tier || 'free');
        }
        
        // Update header navigation
        window.dispatchEvent(new Event('piccatso-auth-change'));
        if (window.refreshAuthButton) {
          window.refreshAuthButton();
        }
        
        // Show success message
        showSuccess('signin', `Welcome ${name}! You have been signed in with Google. Redirecting to your account...`);
        
        // Clean URL and redirect
        setTimeout(() => {
          window.history.replaceState({}, document.title, window.location.pathname);
          window.location.href = '/pages/account';
        }, 2000);
        
        return;
      } catch (error) {
        console.error('Error processing Google OAuth session:', error);
        showError('signin', 'There was an error processing your Google sign-in. Please try again.');
      }
    }
  }
  
  // Check if user is already logged in (only if not logging out)
  const user = JSON.parse(localStorage.getItem('piccatso_user') || '{}');
  if (user.email && user.isLoggedIn) {
    // Show logout section instead of auto-redirecting
    document.getElementById('logout-section').style.display = 'block';
    
    // Update the logout section with user info
    const logoutSection = document.getElementById('logout-section');
    const userName = user.name || 'User';
    const tierName = user.tier ? user.tier.charAt(0).toUpperCase() + user.tier.slice(1) : 'Free';
    
    logoutSection.querySelector('p').textContent = `You are logged in as ${userName} (${tierName} tier). Click below to sign out.`;
  }
});
</script>
