{% comment %}
  Piccatso Account Dashboard
  Displays user's subscription, artwork, cart, and account management
{% endcomment %}

<div class="account-dashboard" id="account-dashboard">
  <style>
    .account-dashboard {
      max-width: 1200px;
      margin: 0 auto;
      padding: 2rem;
    }
    
    .dashboard-nav {
      display: flex;
      gap: 1rem;
      margin-bottom: 3rem;
      border-bottom: 2px solid #e2e8f0;
      overflow-x: auto;
    }
    
    .nav-tab {
      padding: 1rem 2rem;
      background: none;
      border: none;
      font-size: 1.4rem;
      font-weight: 600;
      color: #64748b;
      cursor: pointer;
      white-space: nowrap;
      border-bottom: 3px solid transparent;
      transition: all 0.3s ease;
    }
    
    .nav-tab.active {
      color: #8B5CF6;
      border-bottom-color: #8B5CF6;
    }
    
    .nav-tab:hover {
      color: #8B5CF6;
    }
    
    .dashboard-content {
      display: none;
    }
    
    .dashboard-content.active {
      display: block;
      animation: fadeIn 0.3s ease-in;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    .dashboard-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
      margin-bottom: 3rem;
    }
    
    .dashboard-card {
      background: white;
      border-radius: 1.5rem;
      padding: 2rem;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
      border: 1px solid #f1f5f9;
    }
    
    .card-header {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-bottom: 1.5rem;
    }
    
    .card-icon {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.8rem;
    }
    
    .card-icon.primary { background: linear-gradient(135deg, #8B5CF6, #A855F7); }
    .card-icon.success { background: linear-gradient(135deg, #10b981, #059669); }
    .card-icon.warning { background: linear-gradient(135deg, #f59e0b, #d97706); }
    .card-icon.info { background: linear-gradient(135deg, #3b82f6, #1d4ed8); }
    
    .card-title {
      font-size: 1.8rem;
      font-weight: 700;
      color: #1e293b;
    }
    
    .stat-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
      gap: 1rem;
      margin-top: 1rem;
    }
    
    .stat-item {
      text-align: center;
      padding: 1rem;
      background: #f8fafc;
      border-radius: 0.8rem;
    }
    
    .stat-value {
      font-size: 2rem;
      font-weight: 800;
      color: #8B5CF6;
    }
    
    .stat-label {
      font-size: 1.2rem;
      color: #64748b;
      margin-top: 0.5rem;
    }
    
    .progress-bar {
      width: 100%;
      height: 8px;
      background: #e2e8f0;
      border-radius: 4px;
      overflow: hidden;
      margin: 1rem 0;
    }
    
    .progress-fill {
      height: 100%;
      background: linear-gradient(90deg, #8B5CF6, #A855F7);
      transition: width 0.5s ease;
    }
    
    .subscription-badge {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.5rem 1rem;
      border-radius: 2rem;
      font-size: 1.2rem;
      font-weight: 600;
      margin-bottom: 1rem;
    }
    
    .badge-free { background: #f1f5f9; color: #64748b; }
    .badge-premium { background: #fef3c7; color: #92400e; }
    .badge-pro { background: #d1fae5; color: #065f46; }
    
    .action-button {
      background: linear-gradient(135deg, #8B5CF6, #A855F7);
      color: white;
      border: none;
      padding: 1rem 2rem;
      border-radius: 0.8rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      width: 100%;
      margin-top: 1rem;
    }
    
    .action-button:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(139, 92, 246, 0.3);
    }
    
    .action-button.secondary {
      background: #f1f5f9;
      color: #64748b;
    }
    
    .action-button.secondary:hover {
      background: #e2e8f0;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }
    
    .artwork-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 1.5rem;
      margin-top: 2rem;
    }
    
    .artwork-item {
      position: relative;
      border-radius: 1rem;
      overflow: hidden;
      cursor: pointer;
      transition: transform 0.3s ease;
      background: #f8fafc;
      aspect-ratio: 1;
    }
    
    .artwork-item:hover {
      transform: scale(1.05);
    }
    
    .artwork-image {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    
    .artwork-overlay {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
      color: white;
      padding: 1rem;
      font-size: 1.2rem;
      font-weight: 600;
    }
    
    .cart-item {
      display: flex;
      gap: 1rem;
      padding: 1rem;
      background: #f8fafc;
      border-radius: 1rem;
      margin-bottom: 1rem;
    }
    
    .cart-item-image {
      width: 80px;
      height: 80px;
      border-radius: 0.5rem;
      object-fit: cover;
    }
    
    .cart-item-details {
      flex: 1;
    }
    
    .cart-item-title {
      font-weight: 600;
      margin-bottom: 0.5rem;
    }
    
    .cart-item-price {
      color: #10b981;
      font-weight: 700;
    }
    
    .empty-state {
      text-align: center;
      padding: 3rem;
      color: #64748b;
    }
    
    .empty-state-icon {
      font-size: 4rem;
      margin-bottom: 1rem;
      opacity: 0.5;
    }
    
    /* User Profile Header */
    .user-profile-header {
      background: linear-gradient(135deg, #8B5CF6, #A855F7);
      color: white;
      padding: 3rem;
      border-radius: 2rem;
      margin-bottom: 3rem;
      display: flex;
      align-items: center;
      gap: 2rem;
      box-shadow: 0 8px 32px rgba(139, 92, 246, 0.3);
    }
    
    .profile-avatar {
      flex-shrink: 0;
    }
    
    .avatar-circle {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.2);
      border: 3px solid rgba(255, 255, 255, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 2.4rem;
      font-weight: 700;
      color: white;
    }
    
    .profile-info {
      flex-grow: 1;
    }
    
    .profile-name {
      font-size: 2.4rem;
      font-weight: 700;
      margin: 0 0 0.5rem 0;
      color: white;
    }
    
    .profile-email {
      font-size: 1.4rem;
      margin: 0 0 1rem 0;
      opacity: 0.9;
      color: white;
    }
    
    .profile-tier {
      display: flex;
      align-items: center;
      gap: 1rem;
    }
    
    .tier-badge {
      background: rgba(255, 255, 255, 0.2);
      border: 1px solid rgba(255, 255, 255, 0.3);
      padding: 0.5rem 1rem;
      border-radius: 2rem;
      font-size: 1.2rem;
      font-weight: 600;
    }
    
    .login-status {
      font-size: 1.2rem;
      opacity: 0.8;
      color: #10b981;
      font-weight: 600;
    }
    
    .profile-actions {
      flex-shrink: 0;
    }
    
    .profile-actions .action-button {
      background: rgba(255, 255, 255, 0.2);
      border: 2px solid rgba(255, 255, 255, 0.3);
      color: white;
    }
    
    .profile-actions .action-button:hover {
      background: rgba(255, 255, 255, 0.3);
      border-color: rgba(255, 255, 255, 0.5);
    }

    @media (max-width: 768px) {
      .account-dashboard {
        padding: 1rem;
      }
      
      .dashboard-grid {
        grid-template-columns: 1fr;
      }
      
      .dashboard-nav {
        flex-wrap: wrap;
      }
      
      .user-profile-header {
        flex-direction: column;
        text-align: center;
        padding: 2rem;
      }
      
      .profile-tier {
        justify-content: center;
      }
    }
  </style>

  <!-- Dashboard Navigation -->
  <div class="dashboard-nav">
    <button class="nav-tab active" onclick="showDashboardTab('overview')">üìä Overview</button>
    <button class="nav-tab" onclick="showDashboardTab('artwork')">üé® My Artwork</button>
    <button class="nav-tab" onclick="showDashboardTab('cart')">üõí Shopping Cart</button>
    <button class="nav-tab" onclick="showDashboardTab('orders')">üì¶ Orders</button>
    <button class="nav-tab" onclick="showDashboardTab('settings')">üë§ Settings</button>
  </div>

  <!-- Overview Tab -->
  <div class="dashboard-content active" id="overview-content">
    <!-- User Profile Header -->
    <div class="user-profile-header" id="user-profile-header">
      <div class="profile-avatar">
        <div class="avatar-circle" id="avatar-circle">
          <span id="avatar-initials">U</span>
        </div>
      </div>
      <div class="profile-info">
        <h2 class="profile-name" id="profile-name">Welcome back!</h2>
        <p class="profile-email" id="profile-email">Loading...</p>
        <div class="profile-tier" id="profile-tier-display">
          <span class="tier-badge" id="tier-badge">Free Tier</span>
          <span class="login-status" id="login-status">‚óè Online</span>
        </div>
      </div>
      <div class="profile-actions">
        <button class="action-button secondary" onclick="showDashboardTab('settings')">
          ‚öôÔ∏è Edit Profile
        </button>
      </div>
    </div>
    
    <div class="dashboard-grid">
      
      <!-- Subscription Status Card -->
      <div class="dashboard-card">
        <div class="card-header">
          <div class="card-icon primary">‚≠ê</div>
          <div class="card-title">Subscription Status</div>
        </div>
        <div class="subscription-badge badge-free" id="subscription-badge">
          üÜì Free Tier
        </div>
        <div class="stat-grid">
          <div class="stat-item">
            <div class="stat-value" id="generations-used">0</div>
            <div class="stat-label">Used This Month</div>
          </div>
          <div class="stat-item">
            <div class="stat-value" id="generations-limit">10</div>
            <div class="stat-label">Monthly Limit</div>
          </div>
        </div>
        <div class="progress-bar">
          <div class="progress-fill" id="usage-progress" style="width: 0%"></div>
        </div>
        <button class="action-button" onclick="showUpgradeModal()">
          Upgrade Subscription
        </button>
      </div>
      
      <!-- Quick Stats Card -->
      <div class="dashboard-card">
        <div class="card-header">
          <div class="card-icon success">üìà</div>
          <div class="card-title">Quick Stats</div>
        </div>
        <div class="stat-grid">
          <div class="stat-item">
            <div class="stat-value" id="total-artworks">0</div>
            <div class="stat-label">Total Artworks</div>
          </div>
          <div class="stat-item">
            <div class="stat-value" id="total-prints">0</div>
            <div class="stat-label">Prints Ordered</div>
          </div>
          <div class="stat-item">
            <div class="stat-value" id="cart-items">0</div>
            <div class="stat-label">Cart Items</div>
          </div>
          <div class="stat-item">
            <div class="stat-value" id="favorites-count">0</div>
            <div class="stat-label">Favorites</div>
          </div>
        </div>
      </div>
      
      <!-- Recent Activity Card -->
      <div class="dashboard-card">
        <div class="card-header">
          <div class="card-icon info">üïí</div>
          <div class="card-title">Recent Activity</div>
        </div>
        <div id="recent-activity">
          <div class="empty-state">
            <div class="empty-state-icon">üé®</div>
            <p>No recent activity yet.<br>Start creating some AI art!</p>
          </div>
        </div>
      </div>
      
    </div>
  </div>

  <!-- My Artwork Tab -->
  <div class="dashboard-content" id="artwork-content">
    <div class="dashboard-card">
      <div class="card-header">
        <div class="card-icon primary">üé®</div>
        <div class="card-title">My Artwork Collection</div>
      </div>
      
      <!-- Artwork Filters -->
      <div style="display: flex; gap: 1rem; margin-bottom: 2rem; flex-wrap: wrap;">
        <button class="action-button secondary" onclick="filterArtwork('all')">All</button>
        <button class="action-button secondary" onclick="filterArtwork('recent')">Recent</button>
        <button class="action-button secondary" onclick="filterArtwork('favorites')">Favorites</button>
        <button class="action-button secondary" onclick="filterArtwork('prints')">Ready to Print</button>
      </div>
      
      <!-- Artwork Grid -->
      <div class="artwork-grid" id="artwork-grid">
        <div class="empty-state">
          <div class="empty-state-icon">üé®</div>
          <p>No artwork saved yet.<br>Create your first AI masterpiece!</p>
          <button class="action-button" onclick="window.location.href='/pages/create'">
            Create AI Art
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Shopping Cart Tab -->
  <div class="dashboard-content" id="cart-content">
    <div class="dashboard-grid">
      
      <!-- Current Cart -->
      <div class="dashboard-card">
        <div class="card-header">
          <div class="card-icon warning">üõí</div>
          <div class="card-title">Current Cart</div>
        </div>
        <div id="current-cart-items">
          <div class="empty-state">
            <div class="empty-state-icon">üõí</div>
            <p>Your cart is empty.<br>Add some prints to get started!</p>
          </div>
        </div>
        <button class="action-button" onclick="window.location.href='/cart'">
          View Full Cart
        </button>
      </div>
      
      <!-- Saved for Later -->
      <div class="dashboard-card">
        <div class="card-header">
          <div class="card-icon info">üíæ</div>
          <div class="card-title">Saved for Later</div>
        </div>
        <div id="saved-items">
          <div class="empty-state">
            <div class="empty-state-icon">üíæ</div>
            <p>No items saved for later.</p>
          </div>
        </div>
      </div>
      
    </div>
  </div>

  <!-- Orders Tab -->
  <div class="dashboard-content" id="orders-content">
    <div class="dashboard-card">
      <div class="card-header">
        <div class="card-icon success">üì¶</div>
        <div class="card-title">Order History</div>
      </div>
      <div id="order-history">
        <div class="empty-state">
          <div class="empty-state-icon">üì¶</div>
          <p>No orders yet.<br>Your print orders will appear here!</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Settings Tab -->
  <div class="dashboard-content" id="settings-content">
    <div class="dashboard-grid">
      
      <!-- Account Settings -->
      <div class="dashboard-card">
        <div class="card-header">
          <div class="card-icon primary">üë§</div>
          <div class="card-title">Account Settings</div>
        </div>
        <div style="space-y: 1rem;">
          <div style="margin-bottom: 1rem;">
            <label style="display: block; margin-bottom: 0.5rem; font-weight: 600;">Email Address</label>
            <input type="email" id="user-email" style="width: 100%; padding: 1rem; border: 1px solid #e2e8f0; border-radius: 0.5rem;" readonly>
          </div>
          <div style="margin-bottom: 1rem;">
            <label style="display: block; margin-bottom: 0.5rem; font-weight: 600;">Display Name</label>
            <input type="text" id="user-name" style="width: 100%; padding: 1rem; border: 1px solid #e2e8f0; border-radius: 0.5rem;">
          </div>
        </div>
        <button class="action-button" onclick="updateAccountSettings()">
          Update Settings
        </button>
      </div>
      
      <!-- Password Management -->
      <div class="dashboard-card">
        <div class="card-header">
          <div class="card-icon info">üîí</div>
          <div class="card-title">Password & Security</div>
        </div>
        <div id="password-form" style="display: none;">
          <div style="margin-bottom: 1rem;">
            <label style="display: block; margin-bottom: 0.5rem; font-weight: 600;">Current Password</label>
            <input type="password" id="current-password" style="width: 100%; padding: 1rem; border: 1px solid #e2e8f0; border-radius: 0.5rem;" placeholder="Enter current password">
          </div>
          <div style="margin-bottom: 1rem;">
            <label style="display: block; margin-bottom: 0.5rem; font-weight: 600;">New Password</label>
            <input type="password" id="new-password" style="width: 100%; padding: 1rem; border: 1px solid #e2e8f0; border-radius: 0.5rem;" placeholder="Enter new password" minlength="8">
          </div>
          <div style="margin-bottom: 1rem;">
            <label style="display: block; margin-bottom: 0.5rem; font-weight: 600;">Confirm New Password</label>
            <input type="password" id="confirm-password" style="width: 100%; padding: 1rem; border: 1px solid #e2e8f0; border-radius: 0.5rem;" placeholder="Confirm new password" minlength="8">
          </div>
          <div style="display: flex; gap: 1rem;">
            <button class="action-button" onclick="updatePassword()">
              Update Password
            </button>
            <button class="action-button secondary" onclick="cancelPasswordChange()">
              Cancel
            </button>
          </div>
        </div>
        <div id="password-prompt">
          <p style="margin-bottom: 1rem; color: #64748b;">Keep your account secure with a strong password.</p>
          <button class="action-button" onclick="showPasswordForm()">
            Change Password
          </button>
        </div>
      </div>
      
      <!-- Subscription Management -->
      <div class="dashboard-card">
        <div class="card-header">
          <div class="card-icon warning">üí≥</div>
          <div class="card-title">Subscription Management</div>
        </div>
        <div id="subscription-details">
          <p style="margin-bottom: 1rem;">Current Plan: <strong id="current-plan">Free Tier</strong></p>
          <p style="margin-bottom: 1rem;">Next Billing: <span id="next-billing">No billing scheduled</span></p>
        </div>
        <div style="display: flex; gap: 1rem;">
          <button class="action-button" onclick="showUpgradeModal()">
            Upgrade Plan
          </button>
          <button class="action-button secondary" onclick="manageBilling()">
            Manage Billing
          </button>
        </div>
      </div>
      
    </div>
  </div>

</div>

<!-- Upgrade Modal -->
<div id="upgrade-modal" style="display: none; position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0, 0, 0, 0.5); z-index: 1000; align-items: center; justify-content: center;">
  <div style="background: white; border-radius: 1.5rem; padding: 3rem; max-width: 500px; width: 90%;">
    <h2 style="text-align: center; margin-bottom: 2rem;">Upgrade Your Subscription</h2>
    
    <div style="space-y: 1.5rem;">
      <!-- Premium Tier Option -->
      <div style="border: 2px solid #e2e8f0; border-radius: 1rem; padding: 2rem; cursor: pointer;" onclick="selectPlan('premium')">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
          <h3>‚≠ê Premium</h3>
          <span style="font-size: 2rem; font-weight: 800; color: #8B5CF6;">$9.99/mo</span>
        </div>
        <ul style="list-style: none; padding: 0;">
          <li>‚úÖ 100 generations per month</li>
          <li>‚úÖ Art history (50 creations)</li>
          <li>‚úÖ High resolution (1024x1024px)</li>
          <li>‚úÖ Priority processing</li>
        </ul>
      </div>
      
      <!-- Pro Tier Option -->
      <div style="border: 2px solid #e2e8f0; border-radius: 1rem; padding: 2rem; cursor: pointer;" onclick="selectPlan('pro')">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
          <h3>üé® Pro</h3>
          <span style="font-size: 2rem; font-weight: 800; color: #10b981;">$39.99/mo</span>
        </div>
        <ul style="list-style: none; padding: 0;">
          <li>‚úÖ 1000 generations per month</li>
          <li>‚úÖ Unlimited art history</li>
          <li>‚úÖ Ultra HD (2048x2048px)</li>
          <li>‚úÖ Clean downloads (no watermark)</li>
          <li>‚úÖ 10% print discount</li>
          <li>‚úÖ Commercial usage rights</li>
        </ul>
      </div>
    </div>
    
    <div style="display: flex; gap: 1rem; margin-top: 2rem;">
      <button class="action-button secondary" onclick="closeUpgradeModal()" style="flex: 1;">
        Cancel
      </button>
      <button class="action-button" onclick="processPlanUpgrade()" style="flex: 1;">
        Upgrade Now
      </button>
    </div>
  </div>
</div>

<script>
// Dashboard functionality
let currentUser = {
  tier: 'free',
  generationsUsed: 0,
  generationsLimit: 10,
  artworks: [],
  cartItems: [],
  orders: [],
  email: '',
  name: ''
};

let selectedPlan = null;

// Initialize dashboard
function initializeDashboard() {
  loadUserData();
  updateUserProfile();
  updateDashboardStats();
  loadRecentActivity();
}

// Tab switching
function showDashboardTab(tabName) {
  // Update nav tabs
  document.querySelectorAll('.nav-tab').forEach(tab => {
    tab.classList.remove('active');
  });
  event.target.classList.add('active');
  
  // Update content
  document.querySelectorAll('.dashboard-content').forEach(content => {
    content.classList.remove('active');
  });
  document.getElementById(tabName + '-content').classList.add('active');
  
  // Load tab-specific data
  switch(tabName) {
    case 'artwork':
      loadArtworkCollection();
      break;
    case 'cart':
      loadCartItems();
      break;
    case 'orders':
      loadOrderHistory();
      break;
    case 'settings':
      loadAccountSettings();
      break;
  }
}

// Load user data from localStorage and Shopify customer
function loadUserData() {
  // Load from localStorage (primary source for our app)
  const userData = localStorage.getItem('piccatso_user');
  const userDataExtended = localStorage.getItem('piccatso_user_data');
  
  if (userData) {
    const user = JSON.parse(userData);
    currentUser.email = user.email || '';
    currentUser.name = user.name || '';
    currentUser.tier = user.tier || 'free';
    currentUser.isLoggedIn = user.isLoggedIn || false;
    currentUser.id = user.id || '';
    currentUser.provider = user.provider || '';
    currentUser.isFactory = user.isFactory || false;
  }
  
  if (userDataExtended) {
    const extendedData = JSON.parse(userDataExtended);
    currentUser = { ...currentUser, ...extendedData };
  }
  
  // Fallback to Shopify customer data if available
  if (typeof customer !== 'undefined' && customer && !currentUser.email) {
    currentUser.email = customer.email || '';
    currentUser.name = (customer.first_name + ' ' + customer.last_name).trim() || '';
    
    // Load subscription tier from customer tags
    if (customer.tags) {
      if (customer.tags.includes('premium')) currentUser.tier = 'premium';
      if (customer.tags.includes('pro')) currentUser.tier = 'pro';
      if (customer.tags.includes('factory')) currentUser.tier = 'factory';
    }
  }
  
  // Set defaults if no data
  if (!currentUser.email) {
    currentUser.email = 'guest@piccatso.com';
    currentUser.name = 'Guest User';
    currentUser.isLoggedIn = false;
  }
}

// Update user profile header
function updateUserProfile() {
  // Update avatar initials
  const initials = currentUser.name ? 
    currentUser.name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2) : 'U';
  document.getElementById('avatar-initials').textContent = initials;
  
  // Update profile info
  document.getElementById('profile-name').textContent = currentUser.name || 'Welcome back!';
  document.getElementById('profile-email').textContent = currentUser.email || 'Loading...';
  
  // Update tier badge with proper styling
  const tierBadge = document.getElementById('tier-badge');
  const tierName = currentUser.tier ? currentUser.tier.charAt(0).toUpperCase() + currentUser.tier.slice(1) : 'Free';
  
  tierBadge.textContent = `${tierName} Tier`;
  
  // Color the profile header based on tier
  const profileHeader = document.getElementById('user-profile-header');
  switch(currentUser.tier) {
    case 'factory':
      profileHeader.style.background = 'linear-gradient(135deg, #ef4444, #dc2626)';
      break;
    case 'pro':
      profileHeader.style.background = 'linear-gradient(135deg, #10b981, #059669)';
      break;
    case 'premium':
      profileHeader.style.background = 'linear-gradient(135deg, #8B5CF6, #A855F7)';
      break;
    default:
      profileHeader.style.background = 'linear-gradient(135deg, #64748b, #475569)';
  }
  
  // Update login status
  const loginStatus = document.getElementById('login-status');
  if (currentUser.isLoggedIn) {
    loginStatus.textContent = '‚óè Online';
    loginStatus.style.color = '#10b981';
  } else {
    loginStatus.textContent = '‚óè Offline';
    loginStatus.style.color = '#ef4444';
  }
}

// Update dashboard statistics
function updateDashboardStats() {
  // Update subscription badge
  const badge = document.getElementById('subscription-badge');
  const usageProgress = document.getElementById('usage-progress');
  
  switch(currentUser.tier) {
    case 'premium':
      badge.textContent = '‚≠ê Premium Tier';
      badge.className = 'subscription-badge badge-premium';
      currentUser.generationsLimit = 100;
      break;
    case 'pro':
      badge.textContent = 'üé® Pro Tier';
      badge.className = 'subscription-badge badge-pro';
      currentUser.generationsLimit = 1000;
      break;
    default:
      badge.textContent = 'üÜì Free Tier';
      badge.className = 'subscription-badge badge-free';
      currentUser.generationsLimit = 10;
  }
  
  // Update usage stats
  document.getElementById('generations-used').textContent = currentUser.generationsUsed;
  document.getElementById('generations-limit').textContent = currentUser.generationsLimit;
  
  const usagePercent = (currentUser.generationsUsed / currentUser.generationsLimit) * 100;
  usageProgress.style.width = Math.min(usagePercent, 100) + '%';
  
  // Update quick stats
  document.getElementById('total-artworks').textContent = currentUser.artworks.length;
  document.getElementById('total-prints').textContent = currentUser.orders.length;
  document.getElementById('cart-items').textContent = currentUser.cartItems.length;
  document.getElementById('favorites-count').textContent = currentUser.artworks.filter(a => a.favorite).length;
}

// Load recent activity
function loadRecentActivity() {
  const activityContainer = document.getElementById('recent-activity');
  
  // Mock recent activity data
  const activities = [
    { type: 'creation', text: 'Created "Abstract Waves"', time: '2 hours ago' },
    { type: 'print', text: 'Ordered canvas print', time: '1 day ago' },
    { type: 'favorite', text: 'Added artwork to favorites', time: '3 days ago' }
  ];
  
  if (activities.length === 0) {
    activityContainer.innerHTML = `
      <div class="empty-state">
        <div class="empty-state-icon">üé®</div>
        <p>No recent activity yet.<br>Start creating some AI art!</p>
      </div>
    `;
  } else {
    activityContainer.innerHTML = activities.map(activity => `
      <div style="padding: 1rem; border-bottom: 1px solid #f1f5f9; display: flex; justify-content: space-between;">
        <span>${activity.text}</span>
        <span style="color: #64748b; font-size: 1.2rem;">${activity.time}</span>
      </div>
    `).join('');
  }
}

// Load artwork collection
function loadArtworkCollection() {
  const artworkGrid = document.getElementById('artwork-grid');
  
  if (currentUser.tier === 'free') {
    artworkGrid.innerHTML = `
      <div class="empty-state">
        <div class="empty-state-icon">üîí</div>
        <p>Artwork history is not available on the Free tier.<br>Upgrade to Premium to save your creations!</p>
        <button class="action-button" onclick="showUpgradeModal()">
          Upgrade to Premium
        </button>
      </div>
    `;
    return;
  }
  
  if (currentUser.artworks.length === 0) {
    artworkGrid.innerHTML = `
      <div class="empty-state">
        <div class="empty-state-icon">üé®</div>
        <p>No artwork saved yet.<br>Create your first AI masterpiece!</p>
        <button class="action-button" onclick="window.location.href='/pages/create'">
          Create AI Art
        </button>
      </div>
    `;
  } else {
    artworkGrid.innerHTML = currentUser.artworks.map(artwork => `
      <div class="artwork-item" onclick="viewArtwork('${artwork.id}')">
        <img src="${artwork.image}" alt="${artwork.title}" class="artwork-image">
        <div class="artwork-overlay">
          <div>${artwork.title}</div>
          <div style="font-size: 1rem; opacity: 0.8;">${artwork.date}</div>
        </div>
      </div>
    `).join('');
  }
}

// Load cart items
function loadCartItems() {
  const cartContainer = document.getElementById('current-cart-items');
  const savedContainer = document.getElementById('saved-items');
  
  // Load current cart from Shopify
  fetch('/cart.js')
    .then(response => response.json())
    .then(cart => {
      if (cart.items.length === 0) {
        cartContainer.innerHTML = `
          <div class="empty-state">
            <div class="empty-state-icon">üõí</div>
            <p>Your cart is empty.<br>Add some prints to get started!</p>
          </div>
        `;
      } else {
        cartContainer.innerHTML = cart.items.map(item => `
          <div class="cart-item">
            <img src="${item.image}" alt="${item.title}" class="cart-item-image">
            <div class="cart-item-details">
              <div class="cart-item-title">${item.title}</div>
              <div class="cart-item-price">$${(item.price / 100).toFixed(2)}</div>
            </div>
          </div>
        `).join('');
      }
    })
    .catch(error => {
      console.error('Error loading cart:', error);
    });
}

// Load order history
function loadOrderHistory() {
  const orderContainer = document.getElementById('order-history');
  
  if (currentUser.orders.length === 0) {
    orderContainer.innerHTML = `
      <div class="empty-state">
        <div class="empty-state-icon">üì¶</div>
        <p>No orders yet.<br>Your print orders will appear here!</p>
      </div>
    `;
  } else {
    orderContainer.innerHTML = currentUser.orders.map(order => `
      <div style="padding: 1.5rem; border: 1px solid #e2e8f0; border-radius: 1rem; margin-bottom: 1rem;">
        <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
          <strong>Order #${order.id}</strong>
          <span style="color: #10b981;">$${order.total}</span>
        </div>
        <div style="color: #64748b;">
          <div>Date: ${order.date}</div>
          <div>Status: ${order.status}</div>
        </div>
      </div>
    `).join('');
  }
}

// Load account settings
function loadAccountSettings() {
  document.getElementById('user-email').value = currentUser.email;
  document.getElementById('user-name').value = currentUser.name;
  document.getElementById('current-plan').textContent = currentUser.tier.charAt(0).toUpperCase() + currentUser.tier.slice(1) + ' Tier';
}

// Upgrade modal functions
function showUpgradeModal() {
  document.getElementById('upgrade-modal').style.display = 'flex';
}

function closeUpgradeModal() {
  document.getElementById('upgrade-modal').style.display = 'none';
  selectedPlan = null;
}

function selectPlan(plan) {
  selectedPlan = plan;
  
  // Update visual selection
  document.querySelectorAll('#upgrade-modal > div > div:nth-child(2) > div').forEach(div => {
    div.style.borderColor = '#e2e8f0';
  });
  
  event.target.closest('div').style.borderColor = '#8B5CF6';
}

function processPlanUpgrade() {
  if (!selectedPlan) {
    showNotification('Please select a plan first.', 'error');
    return;
  }
  
  // Show loading state
  const upgradeBtn = document.querySelector('[onclick="processPlanUpgrade()"]');
  const originalText = upgradeBtn.textContent;
  upgradeBtn.textContent = 'Processing...';
  upgradeBtn.disabled = true;
  
  // Simulate upgrade process
  setTimeout(() => {
    // Update user tier
    currentUser.tier = selectedPlan;
    
    // Update localStorage
    const userData = JSON.parse(localStorage.getItem('piccatso_user') || '{}');
    userData.tier = selectedPlan;
    localStorage.setItem('piccatso_user', JSON.stringify(userData));
    localStorage.setItem('piccatso_user_data', JSON.stringify(currentUser));
    
    // Update UI
    updateUserProfile();
    updateDashboardStats();
    
    // Update header navigation
    window.dispatchEvent(new Event('piccatso-auth-change'));
    
    // Reset button and close modal
    upgradeBtn.textContent = originalText;
    upgradeBtn.disabled = false;
    closeUpgradeModal();
    
    // Show success notification
    const tierName = selectedPlan.charAt(0).toUpperCase() + selectedPlan.slice(1);
    showNotification(`Successfully upgraded to ${tierName} plan!`, 'success');
    
    // Reset generations used for new tier
    currentUser.generationsUsed = 0;
    updateDashboardStats();
    
  }, 2000);
}

// Password management functions
function showPasswordForm() {
  document.getElementById('password-prompt').style.display = 'none';
  document.getElementById('password-form').style.display = 'block';
}

function cancelPasswordChange() {
  document.getElementById('password-form').style.display = 'none';
  document.getElementById('password-prompt').style.display = 'block';
  
  // Clear form fields
  document.getElementById('current-password').value = '';
  document.getElementById('new-password').value = '';
  document.getElementById('confirm-password').value = '';
}

async function updatePassword() {
  const currentPassword = document.getElementById('current-password').value;
  const newPassword = document.getElementById('new-password').value;
  const confirmPassword = document.getElementById('confirm-password').value;
  
  // Validation
  if (!currentPassword || !newPassword || !confirmPassword) {
    alert('Please fill in all password fields.');
    return;
  }
  
  if (newPassword.length < 8) {
    alert('New password must be at least 8 characters long.');
    return;
  }
  
  if (newPassword !== confirmPassword) {
    alert('New passwords do not match.');
    return;
  }
  
  try {
    // Check if this is the Factory account
    const user = JSON.parse(localStorage.getItem('piccatso_user') || '{}');
    if (user.isFactory) {
      // Factory account password change
      if (currentPassword !== 'Msi08536') {
        alert('Current password is incorrect.');
        return;
      }
      
      // Update factory credentials (in real implementation, this would be server-side)
      alert('Factory account password updated successfully! Please remember your new password.');
      cancelPasswordChange();
      return;
    }
    
    // For regular Shopify customers, integrate with customer account API
    const response = await fetch('/account', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams({
        'form_type': 'customer_password',
        'utf8': '‚úì',
        'customer[password]': currentPassword,
        'customer[password_confirmation]': newPassword
      })
    });
    
    if (response.ok) {
      alert('Password updated successfully!');
      cancelPasswordChange();
    } else {
      const text = await response.text();
      if (text.includes('Current password is incorrect')) {
        alert('Current password is incorrect.');
      } else {
        alert('Failed to update password. Please try again.');
      }
    }
  } catch (error) {
    console.error('Password update error:', error);
    alert('Network error. Please try again.');
  }
}

function updateAccountSettings() {
  const newName = document.getElementById('user-name').value;
  
  if (!newName.trim()) {
    showNotification('Please enter a valid name.', 'error');
    return;
  }
  
  // Show loading state
  const updateBtn = document.querySelector('[onclick="updateAccountSettings()"]');
  const originalText = updateBtn.textContent;
  updateBtn.textContent = 'Updating...';
  updateBtn.disabled = true;
  
  setTimeout(() => {
    // Update current user data
    currentUser.name = newName.trim();
    
    // Update localStorage
    const userData = JSON.parse(localStorage.getItem('piccatso_user') || '{}');
    userData.name = newName.trim();
    localStorage.setItem('piccatso_user', JSON.stringify(userData));
    localStorage.setItem('piccatso_user_data', JSON.stringify(currentUser));
    
    // Update profile display
    updateUserProfile();
    
    // Update header navigation
    window.dispatchEvent(new Event('piccatso-auth-change'));
    
    // Reset button
    updateBtn.textContent = originalText;
    updateBtn.disabled = false;
    
    showNotification('Account settings updated successfully!', 'success');
  }, 1000);
}

// Notification system
function showNotification(message, type = 'info') {
  // Remove existing notifications
  const existingNotifications = document.querySelectorAll('.notification');
  existingNotifications.forEach(n => n.remove());
  
  // Create notification
  const notification = document.createElement('div');
  notification.className = `notification notification-${type}`;
  notification.innerHTML = `
    <div class="notification-content">
      <span class="notification-icon">${type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : '‚ÑπÔ∏è'}</span>
      <span class="notification-message">${message}</span>
      <button class="notification-close" onclick="this.parentElement.parentElement.remove()">√ó</button>
    </div>
  `;
  
  // Add styles
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    background: ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'};
    color: white;
    padding: 1rem 1.5rem;
    border-radius: 0.8rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    z-index: 10000;
    animation: slideInRight 0.3s ease-out;
    max-width: 400px;
  `;
  
  notification.querySelector('.notification-content').style.cssText = `
    display: flex;
    align-items: center;
    gap: 1rem;
  `;
  
  notification.querySelector('.notification-close').style.cssText = `
    background: none;
    border: none;
    color: white;
    font-size: 1.5rem;
    cursor: pointer;
    padding: 0;
    margin-left: auto;
  `;
  
  document.body.appendChild(notification);
  
  // Auto-remove after 5 seconds
  setTimeout(() => {
    if (notification.parentNode) {
      notification.remove();
    }
  }, 5000);
}

function manageBilling() {
  // This would integrate with Shopify's subscription billing
  alert('Redirecting to billing management... (This would integrate with Shopify billing portal)');
}

// Utility functions
function filterArtwork(filter) {
  // Implementation for artwork filtering
  console.log('Filtering artwork by:', filter);
  showNotification(`Filtering artwork by: ${filter}`, 'info');
}

function viewArtwork(artworkId) {
  // Implementation for viewing specific artwork
  console.log('Viewing artwork:', artworkId);
  showNotification('Opening artwork viewer...', 'info');
}

// Initialize dashboard when page loads
document.addEventListener('DOMContentLoaded', function() {
  initializeDashboard();
  
  // Check URL hash for direct tab navigation
  const hash = window.location.hash.substring(1);
  if (hash && ['overview', 'artwork', 'cart', 'orders', 'settings'].includes(hash)) {
    // Update active tab
    document.querySelectorAll('.nav-tab').forEach(tab => {
      tab.classList.remove('active');
    });
    document.querySelector(`[onclick="showDashboardTab('${hash}')"]`)?.classList.add('active');
    
    // Show content
    document.querySelectorAll('.dashboard-content').forEach(content => {
      content.classList.remove('active');
    });
    document.getElementById(hash + '-content')?.classList.add('active');
    
    // Load tab-specific data
    switch(hash) {
      case 'artwork':
        loadArtworkCollection();
        break;
      case 'cart':
        loadCartItems();
        break;
      case 'orders':
        loadOrderHistory();
        break;
      case 'settings':
        loadAccountSettings();
        break;
    }
  }
});

// Handle hash changes for direct linking
window.addEventListener('hashchange', function() {
  const hash = window.location.hash.substring(1);
  if (hash && ['overview', 'artwork', 'cart', 'orders', 'settings'].includes(hash)) {
    showDashboardTab(hash);
  }
});

// Export functions for global access
window.showDashboardTab = showDashboardTab;
window.showUpgradeModal = showUpgradeModal;
window.closeUpgradeModal = closeUpgradeModal;
window.selectPlan = selectPlan;
window.processPlanUpgrade = processPlanUpgrade;
window.updateAccountSettings = updateAccountSettings;
window.showPasswordForm = showPasswordForm;
window.cancelPasswordChange = cancelPasswordChange;
window.updatePassword = updatePassword;
</script>
